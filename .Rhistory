W <- rmultinom(R, n, as.numeric(pmat))
MIBootstrapFun2 <- function(mat, B, FunName) {
x <- as.numeric(mat)
n <- sum(x)
f1 = sum(x == 1)
f2 = sum(x == 2)
tmp <- Candf0Fun(f1, f2, n)
Chat <- tmp[1] ; f0 <- tmp[2]
lambda <- (1 - Chat) / sum(x / n * (1 - x / n)^n)
pi <- x / n * (1 - lambda * (1 - x /n)^n)
f0x <- f0Fun(apply(mat, 1, sum))
f0y <- f0Fun(apply(mat, 2, sum))
extend <- c(x, rep(0, f0x * nrow(mat) + f0y * ncol(mat) + f0x * f0y))
zeroPos <- which(extend == 0)
pos <- sample(zeroPos, f0)
extend[pos] <- (1 - Chat) / f0
W <- rmultinom(B, n, extend)
se <- sd(apply(W, 2, function(w) {
w1 <- permutaFun(w)
FunName(w1)
}))
return(se)
require(shiny)
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
remove.packages("ChaoEntropyOnline")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
a <- list(1,2,3)
a
a <- list(c(1,2,3))
a
round(a)
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
ChaoEntropyOnline
library("ChaoEntropy", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ChaoEntropy(Spider, datatype="abundance", method="all", se=TRUE, nboot=200, conf=0.95)
data(Spider)
ChaoEntropy(Spider, datatype="abundance", method="all", se=TRUE, nboot=200, conf=0.95)
ChaoEntropyOnline(Spider, datatype="abundance", method="all", se=TRUE, nboot=200, conf=0.95)
ChaoEntropyOnline(Spider, datatype="abundance", method="Chao", se=TRUE, nboot=200, conf=0.95)
a <- ChaoEntropyOnline(Spider, datatype="abundance", method="Chao", se=TRUE, nboot=200, conf=0.95)
a
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
load("~/Documents/GitHub/ChaoEntropyAppLocal/data/Ant.rda")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
require(shiny)
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
require(shiny)
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
a <- 1:7
which(a == 1 | a == 3 | a == 6)
x <- c(3,5,6)
x %in% a
which(x %in% a)
which(x %in% a)
which(a == 1 | a == 3 | a == 6)
(x %in% a)
a[x %in% a]
a[which(x %in% a)]
?match
intersect(1:10, 7:20)
match(x, a)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(plyr)
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
library(plyr)
df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30))
# Compute sample mean and standalibrary(plyr)
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
# Declare the data frame and common aesthetics.
# The summary data frame ds is used to plot
# larger red points in a second geom_point() layer.
# If the data = argument is not specified, it uses the
# declared data frame from ggplot(); ditto for the aesthetics.
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(x = gp, y = y)) +
geom_point(data = ds, aes(x = gp, y = mean),
colour = 'red', size = 3)
Generate data
c <- ggplot(mtcars, aes(factor(cyl)))
c + geom_bar()
c
c <- ggplot(mtcars, aes(factor(cyl)))
mtcars
c <- ggplot(mtcars, aes(factor(cyl)))
# By default, uses stat="bin", which gives the count in each category
c + geom_bar()
c + geom_bar(width=.5)
c + geom_bar() + coord_flip()
c + geom_bar(fill="white", colour="darkgreen")
# Use qplot
qplot(factor(cyl), data=mtcars, geom="bar")
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))
cars
ss <- as.factor(cars[, 2])
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))
ss
cyl
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))
mtcars
qplot(cyl, data=mtcars, geom="bar", fill=factor(cyl))
factor(mtcars$cyl)
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))
library(plyr)
# Calculate the mean mpg for each level of cyl
mm <- ddply(mtcars, "cyl", summarise, mmpg = mean(mpg))
ggplot(mm, aes(x = factor(cyl), y = mmpg)) + geom_bar(stat = "identity")
g <- ggplot(mtcars, aes(
x=factor(cyl),
fill=factor(cyl)
))
g + geom_bar(stat="bin") +
scale_fill_brewer(palette="Set2") +
theme_classic()
g <- ggplot(mtcars, aes(
x=factor(cyl),
color=factor(cyl)
))
g + geom_bar(stat="bin") +
scale_fill_brewer(palette="Set2") +
theme_classic()
require(ChaoShared)
data(Birds2Estuaries)
ChaoShared(Birds2Estuaries, datatype="abundance", se=TRUE, nboot=200, conf=0.95)
ChaoShared.Basic(Birds2Estuaries, datatype="abundance")
ChaoShared.Basic(BBR, datatype="incidence")
?chisq.test
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2)
mydata
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2, dimnames=c("1"))
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2,
dimnames=list(c("placebo", "aspirin"), c("yes", "no")))
mydata
chisq.test(mydata)
chisq.test(mydata, correct=F)
chisq.test(mydata)
install.packages("lmtest")
require("lmtest")
lrtest(mydata)
data("USDistLag")
USDistLag
LR <- 2 * sum(mydata * log(mydata / eij))
##  Likelihood Ratio Chi-Square
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
LR
chisq.test(mydata, correct=F)
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
LR
fisher.test(mydata)
fisher.test(mydata, alternative = "less")$p.value
fisher.test(mydata, alternative = "less")$p.value
fisher.test(mydata, alternative = "greater")$p.value
fisher.test(mydata)$p.value
fisher.test(mydata, alternative = "less")
sum(mydata)
chisq.test(mydata, correct=F) / sum(mydata)
chisq.test(mydata, correct=F)
a <- chisq.test(mydata, correct=F)
a$statistic
chisq.test(mydata, correct=F)$statistic / sum(mydata)
sqrt(chisq.test(mydata, correct=F)$statistic / sum(mydata))
chi <- chisq.test(mydata, correct=F)$statistic
sqrt(chi / (chi + sum(mydata)))
rho2 <- chisq.test(mydata, correct=F)$statistic / sum(mydata)
rho2 / min(ncol(mydata) - 1, nrow(mydata) - 1)
min(ncol(mydata) - 1, nrow(mydata) - 1)
rho2
chisq.test(mydata, correct=F)$statistic / sum(mydata)
sqrt(rho2 / min(ncol(mydata) - 1, nrow(mydata) - 1))
install.packages("cramer")
require("cramer")
cramer.test(mydata)
library(RelativeRisk)
install.packages("RelativeRisk")
install.packages("RelativeRisk")
require(RelativeRisk)
data(gradData)
gradData
aa <- est.rr(Count | Admitted ~ Dept * Male, gradData, indexed = TRUE)
aa
aa$table
est.rr(mydata)
Count
gradData
x11 <- mydata[1, 1]
x12 <- mydata[1, 2]
x21 <- mydata[2, 1]
x22 <- mydata[2, 2]
OR <-  x11 * x22 / (x12 * x21)
OR
sd_lnOR <-  sqrt(sum(1 / mydata))
sd_lnOR
CI_case_control <- round(exp(c(log(value1) - 1.96 * sd_lnOR , log(value1) + 1.96 * sd_lnOR)), 3)
CI_case_control <- round(exp(c(log(OR) - 1.96 * sd_lnOR , log(OR) + 1.96 * sd_lnOR)), 3)
CI_case_contro
CI_case_control
p1 <- x11 / sum(x11 + x12)
p2 <- x21 / sum(x21 + x22)
RR1 = p1 / p2
RR1
OR
RR1 = p1 / p2
RR1
p1 <- x11 / sum(x11 + x12)
p2 <- x21 / sum(x21 + x22)
RR1 <- p1 / p2
x21
x11
x21
x12
mydata
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2, byrow = T
dimnames=list(c("placebo", "aspirin"), c("yes", "no")))
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2, byrow=T,
dimnames=list(c("placebo", "aspirin"), c("yes", "no")))
mydata
x11 <- mydata[1, 1]
x12 <- mydata[1, 2]
x21 <- mydata[2, 1]
x22 <- mydata[2, 2]
OR <-  x11 * x22 / (x12 * x21)
sd_lnOR <-  sqrt(sum(1 / mydata))
CI_case_control <- round(exp(c(log(OR) - 1.96 * sd_lnOR , log(OR) + 1.96 * sd_lnOR)), 3)
p1 <- x11 / sum(x11 + x12)
p2 <- x21 / sum(x21 + x22)
RR1 <- p1 / p2
sd_lnRR = sqrt((1-p1)/(sum(x11+x12)*p1) + (1-p2)/(sum(x21+x22)*p2))
CI_RR = round(exp(c(log(p1/p2) - 1.96*sd_lnRR , log(p1/p2) + 1.96*sd_lnRR)), 3)
RR1
sd_lnRR <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
sd_lnRR
CI_RR <- round(exp(c(log(RR1) - 1.96 * sd_lnRR, log(p1 / p2) + 1.96 * sd_lnRR)), 3)
CI_RR1 <- round(exp(c(log(RR1) - 1.96 * sd_lnRR, log(p1 / p2) + 1.96 * sd_lnRR)), 3)
CI_RR1
RR2 <- x12 / sum(x11 + x12) / (x22 / sum(x21 + x22))
RR2
sd_lnRR2 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
RR2 <- x12 / sum(x11 + x12) / (x22 / sum(x21 + x22))
sd_lnRR2 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
CI_RR2 <- round(exp(c(log(RR2) - 1.96 * sd_lnRR, log(RR2) + 1.96 * sd_lnRR)), 3)
CI_RR2
p1 <- x12 / sum(x11 + x12)
p2 <- x22 / sum(x21 + x22)
sd_lnRR2 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
CI_RR2 <- round(exp(c(log(RR2) - 1.96 * sd_lnRR, log(RR2) + 1.96 * sd_lnRR)), 3)
CI_RR2
p2
RR2 <- x12 / sum(x11 + x12) / (x22 / sum(x21 + x22))
p1 <- x12 / sum(x11 + x12)
p2 <- x22 / sum(x21 + x22)
p1
p2
x12
x22
p1 <- x11 / sum(x11 + x12)
p2 <- x21 / sum(x21 + x22)
p1
RR2 <- x12 / sum(x11 + x12) / (x22 / sum(x21 + x22))
p1 <- x12 / sum(x11 + x12)
p2 <- x22 / sum(x21 + x22)
sd_lnRR2 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
CI_RR2 <- round(exp(c(log(RR2) - 1.96 * sd_lnRR, log(RR2) + 1.96 * sd_lnRR)), 3)
CI_RR2
CI_RR2 <- round(exp(c(log(RR2) - 1.96 * sd_lnRR2, log(RR2) + 1.96 * sd_lnRR2)), 3)
CI_RR2
RR2 <- p1 / p2
RR2
chisq.test(mydata, correct=F)
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
LR
chisq.test(mydata, correct=F)
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
df <- chisq.test(mydata , correct = F)$parameter
p.value <- chisq.test(mydata , correct = F)$p.value
lr <- data.frame(LR , df, p.value)
rownames(lr) = c("LR Chi Square")
lr
fisher.test(mydata, alternative = "less")$p.value     # Left
fisher.test(mydata, alternative = "greater")$p.value  # Right
fisher.test(mydata)$p.value                           # 2-Tail
sqrt(chisq.test(mydata, correct=F)$statistic / sum(mydata))
chisq.test(mydata, correct=F)$statistic
a <- chisq.test(mydata, correct=F)$statistic
rho <- sqrt(chisq.test(mydata, correct=F)$statistic / sum(mydata))
names(rho)
rho
names(rho) <- NULL
rho
chi <- chisq.test(mydata, correct=F)$statistic
sqrt(chi / (chi + sum(mydata)))
chi <- chisq.test(mydata, correct=F)$statistic
coeff <- sqrt(chi / (chi + sum(mydata)))
names(coeff) <- NULL
coeff
rho2 <- chisq.test(mydata, correct=F)$statistic / sum(mydata)
sqrt(rho2 / min(ncol(mydata) - 1, nrow(mydata) - 1))
V <- sqrt(rho2 / min(ncol(mydata) - 1, nrow(mydata) - 1))
names(V) <- NULL
V
x11 <- mydata[1, 1]
x12 <- mydata[1, 2]
x21 <- mydata[2, 1]
x22 <- mydata[2, 2]
c(OR, CI_case_control)
rbind(c(OR, CI_case_control), c(RR1, CI_RR1), c(RR2, CI_RR2))
output <- rbind(c(OR, CI_case_control), c(RR1, CI_RR1), c(RR2, CI_RR2))
colnames(output) = c("Value", "Low bound", "Upper bound")
row.names(output) = c("Case-Control", "Cohort(Co1 1 Risk)", "Cohort(Co1 2 Risk)")
EstimateRR <- function(data) {
x11 <- mydata[1, 1]
x12 <- mydata[1, 2]
x21 <- mydata[2, 1]
x22 <- mydata[2, 2]
OR <-  x11 * x22 / (x12 * x21)
sd_lnOR <-  sqrt(sum(1 / mydata))
CI_case_control <- round(exp(c(log(OR) - 1.96 * sd_lnOR, log(OR) + 1.96 * sd_lnOR)), 3)
##  Relative Risk (RR) / column 1 Risk
p1 <- x11 / sum(x11 + x12)
p2 <- x21 / sum(x21 + x22)
RR1 <- p1 / p2
sd_lnRR1 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
CI_RR1 <- round(exp(c(log(RR1) - 1.96 * sd_lnRR1, log(RR1) + 1.96 * sd_lnRR1)), 3)
##  Relative Risk (RR) / column 2 Risk
p1 <- x12 / sum(x11 + x12)
p2 <- x22 / sum(x21 + x22)
RR2 <- p1 / p2
sd_lnRR2 <- sqrt((1 - p1) / (sum(x11 + x12) * p1) + (1 - p2) / (sum(x21 + x22) * p2))
CI_RR2 <- round(exp(c(log(RR2) - 1.96 * sd_lnRR2, log(RR2) + 1.96 * sd_lnRR2)), 3)
output <- rbind(c(OR, CI_case_control), c(RR1, CI_RR1), c(RR2, CI_RR2))
colnames(output) = c("Value", "Low bound", "Upper bound")
row.names(output) = c("Case-Control", "Cohort(Co1 1 Risk)", "Cohort(Co1 2 Risk)")
return(output)
}
EstimateRR(mydata)
V
mydata <- matrix(c(189, 10845, 104, 10933), ncol=2, byrow=T,
dimnames=list(c("placebo", "aspirin"), c("yes", "no")))
mydata
##  Chi-Square
chisq.test(mydata, correct=F)
##  Continuity Adj. Chi-Square
chisq.test(mydata)
##  Likelihood Ratio Chi-Square
eij <- chisq.test(mydata, correct = F)$expected
LR <- 2 * sum(mydata * log(mydata / eij))
df <- chisq.test(mydata , correct = F)$parameter
p.value <- chisq.test(mydata , correct = F)$p.value
lr <- data.frame(LR , df, p.value)
rownames(lr) = c("LR Chi Square")
lr
##  Fisher's Exact Test
fisher.test(mydata, alternative = "less")$p.value     # Left
fisher.test(mydata, alternative = "greater")$p.value  # Right
fisher.test(mydata)$p.value                           # 2-Tail
##  Phi Coefficient
rho <- sqrt(chisq.test(mydata, correct=F)$statistic / sum(mydata))
names(rho) <- NULL
rho
##  Continuity Coefficient
chi <- chisq.test(mydata, correct=F)$statistic
coeff <- sqrt(chi / (chi + sum(mydata)))
names(coeff) <- NULL
coeff
##  Cramer's V
rho2 <- chisq.test(mydata, correct=F)$statistic / sum(mydata)
V <- sqrt(rho2 / min(ncol(mydata) - 1, nrow(mydata) - 1))
names(V) <- NULL
V
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
require(shiny)
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
library("ChaoEntropy", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
setwd("~/Documents/GitHub/ChaoEntropyAppLocal")
load("data/Ant.rda")
load("data/Birds.rda")
load("data/Seedlings.rda")
load("data/Spider.rda")
load("data/Ant.rda")
load("data/Birds.rda")
load("data/Seedlings.rda")
load("data/Spider.rda")
source("sub.R")
source("ChaoEntropyOnlineFunction.R")
dataset <- list(Spider, Birds)
dataset
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, input$nboot), options=list(width='90%', height='50%', sort='disable'))
})
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
plot(summ)
summ
plot(summ[1])
plot(summ[[1]])
summ[[1]]
summ[[1]]
a <- summ[[1]]
htmlOutput(summ)
a$html
a$html$footer
a$html$caption
a$html$-footer
a$html$[-footer]
a$html[-3]
a$html[-c(3:4)]
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
summ <- summ$html[-c(3:4)]
plot(summ[[1]])
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
summ$html <- summ$html[-c(3:4)]
summ[[1]]
plot(summ[[1]])
summ$html
summ[[1]]$html
summ[[1]]$html[-c(3:4)]
summ[[1]]$html <- summ[[1]]$html[-c(3:4)]
summ[[1]]$html
summ[[1]]
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
summ$html
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
for (i in seq_along(dataset)) {
summ[[i]]$html <- summ$html[-c(3:4)]
}
plot(summ[[1]])
summ <- lapply(dataset, function(x) {
gvisTable(BasicInfoFun_Ind(x, 200), options=list(width='90%', height='50%', sort='disable'))
})
for (i in seq_along(dataset)) {
summ[[i]]$html <- summ[[i]]$html[-c(3:4)]
}
plot(summ[[1]])
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
out <- lapply(dataset, function(x) {
temp <- ChaoEntropyOnline(data=x, datatype="abu")
temp <- round(temp, 3)
output <- as.data.frame(temp)
tab <- cbind(Method=rownames(output), output)
rownames(tab) <- NULL
gis <- gvisTable(tab, options=list(width='90%', height='60%'))
return(list(temp, gis))
})
out
out[1]
out[[1]]
out
out[[1]][[2]]
a <- out[[1]][[2]]
plot(out[[1]][[2]])
out <- lapply(dataset, function(x) {
temp <- ChaoEntropyOnline(data=x, datatype="abu", nboot=20)
temp <- round(temp, 3)
output <- as.data.frame(temp)
tab <- cbind(Method=rownames(output), output)
rownames(tab) <- NULL
gis <- gvisTable(tab, options=list(width='90%', height='60%'))
gis$html <- gis$html[-c(3:4)]
return(list(temp, gis))
})
plot(out[[1]][[2]])
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
plot(out[[1]][[2]])
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
runApp("~/Documents/GitHub/ChaoEntropyAppLocal")
